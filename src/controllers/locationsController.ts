/**
 * Shell EVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { BadRequestError } from '../errors/badRequestError';
import { NotFoundError } from '../errors/notFoundError';
import { UnauthorizedError } from '../errors/unauthorizedError';
import {
  MarkersResponse,
  markersResponseSchema,
} from '../models/containers/markersResponse';
import {
  GetLocationsListAuthorizationMethodsEnum,
  getLocationsListAuthorizationMethodsEnumSchema,
} from '../models/getLocationsListAuthorizationMethodsEnum';
import {
  GetLocationsListConnectorTypesEnum,
  getLocationsListConnectorTypesEnumSchema,
} from '../models/getLocationsListConnectorTypesEnum';
import {
  GetLocationsListEvseStatusEnum,
  getLocationsListEvseStatusEnumSchema,
} from '../models/getLocationsListEvseStatusEnum';
import {
  GetMarkersListAuthorizationMethodsEnum,
  getMarkersListAuthorizationMethodsEnumSchema,
} from '../models/getMarkersListAuthorizationMethodsEnum';
import {
  GetMarkersListConnectorTypesEnum,
  getMarkersListConnectorTypesEnumSchema,
} from '../models/getMarkersListConnectorTypesEnum';
import {
  GetMarkersListEvseStatusEnum,
  getMarkersListEvseStatusEnumSchema,
} from '../models/getMarkersListEvseStatusEnum';
import {
  GetNearbyLocationsAuthorizationMethodsEnum,
  getNearbyLocationsAuthorizationMethodsEnumSchema,
} from '../models/getNearbyLocationsAuthorizationMethodsEnum';
import {
  GetNearbyLocationsConnectorTypesEnum,
  getNearbyLocationsConnectorTypesEnumSchema,
} from '../models/getNearbyLocationsConnectorTypesEnum';
import {
  GetNearbyLocationsEvseStatusEnum,
  getNearbyLocationsEvseStatusEnumSchema,
} from '../models/getNearbyLocationsEvseStatusEnum';
import {
  LocationResponeObject,
  locationResponeObjectSchema,
} from '../models/locationResponeObject';
import { array, boolean, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class LocationsController extends BaseController {
  /**
   * This API provides the list of all Shell Recharge locations. The list includes all Shell Recharge
   * network and all locations available through our roaming partners.The end point provides flexible
   * search criteria in order to get the list of Shell Recharge Network. The end point provides the
   * details such as the exact location/address of the site along with the up-to-date status information
   * of all the charging units in the site.
   *
   * Supported Search Options
   *
   * * Based on status of the Charging units. Eg : Available or Occupied
   * * Based on available connector types.
   * * Based on minimum Power output (in kW) available
   * * Based on a specific charging unit ID (EVSE ID)
   *
   * @param requestId            A unique request id in GUID format. The
   *                                                                         value is written to the Shell API Platform
   *                                                                         audit log for end to end traceability of a
   *                                                                         request.
   * @param evseStatus           Filter by Locations that have the given
   *                                                                         status
   * @param connectorTypes       Filter by Locations that have Connectors
   *                                                                         with the set of Connector Types
   * @param connectorMinPower    Filter by Locations that have a Connector
   *                                                                         with at least this power output (in kW)
   * @param authorizationMethods Filter by Locations that support the
   *                                                                         given Authorization Methods
   * @param withOperatorName     Return operator name in marker response
   *                                                                         object
   * @param evseId               optional Standard EVSE (Electric Vehicle
   *                                                                         Supply Equipment) Id identifier (ISO-IEC-
   *                                                                         15118)
   * @param locationExternalId   Filter by Locations with the given
   *                                                                         externalId. (Unique Location externalID
   *                                                                         provided by Shell Recharge)
   * @param evseExternalId       Filter by Locations that have an Evse
   *                                                                         with the given External Id. (Unique
   *                                                                         individual EVSE externalID provided by
   *                                                                         Shell Recharge)
   * @param pageNumber           Restrict the response list by providing a
   *                                                                         specific set of page Number. Set perPage
   *                                                                         parameter also when pageNumber is used.
   * @param perPage              Restrict the number of sites in reposne
   *                                                                         per page.
   * @param updatedSince         ZonedDateTime as string
   * @return Response from the API call
   */
  async getLocationsList(
    requestId: string,
    evseStatus?: GetLocationsListEvseStatusEnum,
    connectorTypes?: GetLocationsListConnectorTypesEnum,
    connectorMinPower?: number,
    authorizationMethods?: GetLocationsListAuthorizationMethodsEnum,
    withOperatorName?: boolean,
    evseId?: string,
    locationExternalId?: string,
    evseExternalId?: string,
    pageNumber?: number,
    perPage?: number,
    updatedSince?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocationResponeObject[]>> {
    const req = this.createRequest('GET', '/locations/v1/ev');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      evseStatus: [evseStatus, optional(getLocationsListEvseStatusEnumSchema)],
      connectorTypes: [
        connectorTypes,
        optional(getLocationsListConnectorTypesEnumSchema),
      ],
      connectorMinPower: [connectorMinPower, optional(number())],
      authorizationMethods: [
        authorizationMethods,
        optional(getLocationsListAuthorizationMethodsEnumSchema),
      ],
      withOperatorName: [withOperatorName, optional(boolean())],
      evseId: [evseId, optional(string())],
      locationExternalId: [locationExternalId, optional(string())],
      evseExternalId: [evseExternalId, optional(string())],
      pageNumber: [pageNumber, optional(number())],
      perPage: [perPage, optional(number())],
      updatedSince: [updatedSince, optional(string())],
    });
    req.header('RequestId', mapped.requestId);
    req.query('evseStatus', mapped.evseStatus);
    req.query('connectorTypes', mapped.connectorTypes);
    req.query('connectorMinPower', mapped.connectorMinPower);
    req.query('authorizationMethods', mapped.authorizationMethods);
    req.query('withOperatorName', mapped.withOperatorName);
    req.query('evseId', mapped.evseId);
    req.query('locationExternalId', mapped.locationExternalId);
    req.query('evseExternalId', mapped.evseExternalId);
    req.query('pageNumber', mapped.pageNumber);
    req.query('perPage', mapped.perPage);
    req.query('updatedSince', mapped.updatedSince);
    req.throwOn(400, BadRequestError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).');
    req.throwOn(401, UnauthorizedError, 'The request has not been applied because it lacks valid authentication credentials for the target resource.');
    req.throwOn(404, NotFoundError, 'Location Not Found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(array(locationResponeObjectSchema), requestOptions);
  }

  /**
   * This API provides the details on a single Shell Recharge location.
   * The query for a single location is to be made using the Unique Internal identifier used to refer to
   * this Location by Shell Recharge. (Uid from List of locations API)
   *
   * @param requestId A unique request id in GUID format. The value is written to the Shell API Platform
   *                            audit log for end to end traceability of a request.
   * @param id        Unique Uid of the location from List of locations API
   * @return Response from the API call
   */
  async getLocationById(
    requestId: string,
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocationResponeObject>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      id: [id, string()],
    });
    req.header('RequestId', mapped.requestId);
    req.appendTemplatePath`/locations/v1/ev/${mapped.id}`;
    req.throwOn(400, BadRequestError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).');
    req.throwOn(401, UnauthorizedError, 'The request has not been applied because it lacks valid authentication credentials for the target resource.');
    req.throwOn(404, NotFoundError, 'Location Not Found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(locationResponeObjectSchema, requestOptions);
  }

  /**
   * This API provides the list of all near by Shell Recharge locations based on the latitude and
   * longitude provided in the request.
   * The list includes all Shell Recharge network and all sites available through our roaming partners.
   * The end point provides the details such as the exact location/address of the site along with the up-
   * to-date status information of all the charging units in the site.
   *
   * Supported Search Options
   *
   * * Based on latitude and longitude of the location. (Mandatory)
   * * Based on status of the Charging units. Eg : Available or Occupied
   * * Based on available connector types.
   * * Based on minimum Power output (in kW) available
   *
   * @param requestId            A unique request id in GUID format. The
   *                                                                           value is written to the Shell API
   *                                                                           Platform audit log for end to end
   *                                                                           traceability of a request.
   * @param latitude             Latitude to get Shell Recharge
   *                                                                           Locations nearby
   * @param longitude            Longitude to get Shell Recharge
   *                                                                           Locations nearby
   * @param limit                Maximum number of Locations to
   *                                                                           retrieve
   * @param locationExternalId   Filter by Locations with the given
   *                                                                           externalId Identifier as given by the
   *                                                                           Shell Recharge Operator, unique for that
   *                                                                           Operator
   * @param evseId               Filter by Locations that have an Evse
   *                                                                           with the given Evse Id
   * @param evseExternalId       Filter by Locations that have an Evse
   *                                                                           with the given External Id Identifier of
   *                                                                           the Evse as given by the Operator,
   *                                                                           unique for that Operator
   * @param operatorName         Filter by Locations that have the given
   *                                                                           operator
   * @param evseStatus           Filter by Locations that have the given
   *                                                                           status
   * @param connectorTypes       Filter by Locations that have
   *                                                                           Connectors with these Connector Types
   * @param connectorMinPower    Filter by Locations that have a
   *                                                                           Connector with at least this power
   *                                                                           output (in kW)
   * @param authorizationMethods Filter by Locations that support the
   *                                                                           given Authorization Methods
   * @param withOperatorName     Return operator name in marker object
   *                                                                           (only for marker type
   *                                                                           SingleChargePoint)
   * @param withMaxPower         Return maximum power in kW across all
   *                                                                           locations grouped in this marker
   *                                                                           (disregarding availability)
   * @return Response from the API call
   */
  async getNearbyLocations(
    requestId: string,
    latitude: number,
    longitude: number,
    limit?: number,
    locationExternalId?: string,
    evseId?: string,
    evseExternalId?: string,
    operatorName?: string,
    evseStatus?: GetNearbyLocationsEvseStatusEnum,
    connectorTypes?: GetNearbyLocationsConnectorTypesEnum,
    connectorMinPower?: number,
    authorizationMethods?: GetNearbyLocationsAuthorizationMethodsEnum,
    withOperatorName?: boolean,
    withMaxPower?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocationResponeObject>> {
    const req = this.createRequest('GET', '/locations/v1/ev/nearby');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      latitude: [latitude, number()],
      longitude: [longitude, number()],
      limit: [limit, optional(number())],
      locationExternalId: [locationExternalId, optional(string())],
      evseId: [evseId, optional(string())],
      evseExternalId: [evseExternalId, optional(string())],
      operatorName: [operatorName, optional(string())],
      evseStatus: [
        evseStatus,
        optional(getNearbyLocationsEvseStatusEnumSchema),
      ],
      connectorTypes: [
        connectorTypes,
        optional(getNearbyLocationsConnectorTypesEnumSchema),
      ],
      connectorMinPower: [connectorMinPower, optional(number())],
      authorizationMethods: [
        authorizationMethods,
        optional(getNearbyLocationsAuthorizationMethodsEnumSchema),
      ],
      withOperatorName: [withOperatorName, optional(boolean())],
      withMaxPower: [withMaxPower, optional(boolean())],
    });
    req.header('RequestId', mapped.requestId);
    req.query('latitude', mapped.latitude);
    req.query('longitude', mapped.longitude);
    req.query('limit', mapped.limit);
    req.query('locationExternalId', mapped.locationExternalId);
    req.query('evseId', mapped.evseId);
    req.query('evseExternalId', mapped.evseExternalId);
    req.query('operatorName', mapped.operatorName);
    req.query('evseStatus', mapped.evseStatus);
    req.query('connectorTypes', mapped.connectorTypes);
    req.query('connectorMinPower', mapped.connectorMinPower);
    req.query('authorizationMethods', mapped.authorizationMethods);
    req.query('withOperatorName', mapped.withOperatorName);
    req.query('withMaxPower', mapped.withMaxPower);
    req.throwOn(400, BadRequestError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).');
    req.throwOn(401, UnauthorizedError, 'The request has not been applied because it lacks valid authentication credentials for the target resource.');
    req.throwOn(404, NotFoundError, 'Location Not Found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(locationResponeObjectSchema, requestOptions);
  }

  /**
   * This API, when given a set of bounds on the geographical front (East,West, North, South) will return
   * a set of Markers that fall within the requested bounds. The API will automatically group locations
   * at the same position on the map into one Marker.
   *
   * The API also provide further search options to filter the result set.
   *
   * * Based on status of the Charging units. Eg : Available or Occupied
   * * Based on available connector types.
   * * Based on minimum Power output (in kW) available
   *
   * @param requestId            A unique request id in GUID format. The
   *                                                                       value is written to the Shell API Platform
   *                                                                       audit log for end to end traceability of a
   *                                                                       request.
   * @param west                 Longitude of the western bound to get the
   *                                                                       Shell Recharge Locations
   * @param south                Latitude of the southern bound to get the
   *                                                                       Shell Recharge Locations
   * @param east                 Longitude of the eastern bound to get the
   *                                                                       Shell Recharge Locations
   * @param north                Latitude of the northern bound to get the
   *                                                                       Shell Recharge Locations
   * @param zoom                 Zoom level to show ex: (1: World, 5:
   *                                                                       Landmass/continent, 10: City, 15: Streets,
   *                                                                       20: Buildings)
   * @param evseStatus           Filter by Locations that have the given
   *                                                                       status
   * @param connectorTypes       Filter by Locations that have Connectors
   *                                                                       with the set of Connector Types
   * @param connectorMinPower    Filter by Locations that have a Connector
   *                                                                       with at least this power output (in kW)
   * @param authorizationMethods Filter by Locations that support the given
   *                                                                       Authorization Methods
   * @param withOperatorName     Return operator name in marker object (only
   *                                                                       for marker type SingleChargePoint)
   * @param withMaxPower         Return maximum power in kW across all
   *                                                                       locations grouped in this marker
   *                                                                       (disregarding availability)
   * @param locationExternalId   Filter by Locations with the given
   *                                                                       externalId. (Unique Location externalID
   *                                                                       provided by Shell Recharge)
   * @param evseId               Filter by Locations that have an Evse with
   *                                                                       the given Evse Id
   * @param evseExternalId       Filter by Locations that have an Evse with
   *                                                                       the given External Id Identifier of the Evse
   *                                                                       as given by the Operator, unique for that
   *                                                                       Operator
   * @param operatorName         Filter by Locations that have the given
   *                                                                       operator
   * @return Response from the API call
   */
  async getMarkersList(
    requestId: string,
    west: number,
    south: number,
    east: number,
    north: number,
    zoom: string,
    evseStatus?: GetMarkersListEvseStatusEnum,
    connectorTypes?: GetMarkersListConnectorTypesEnum,
    connectorMinPower?: number,
    authorizationMethods?: GetMarkersListAuthorizationMethodsEnum,
    withOperatorName?: boolean,
    withMaxPower?: boolean,
    locationExternalId?: string,
    evseId?: string,
    evseExternalId?: string,
    operatorName?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MarkersResponse[]>> {
    const req = this.createRequest('GET', '/locations/v1/ev/markers');
    const mapped = req.prepareArgs({
      requestId: [requestId, string()],
      west: [west, number()],
      south: [south, number()],
      east: [east, number()],
      north: [north, number()],
      zoom: [zoom, string()],
      evseStatus: [evseStatus, optional(getMarkersListEvseStatusEnumSchema)],
      connectorTypes: [
        connectorTypes,
        optional(getMarkersListConnectorTypesEnumSchema),
      ],
      connectorMinPower: [connectorMinPower, optional(number())],
      authorizationMethods: [
        authorizationMethods,
        optional(getMarkersListAuthorizationMethodsEnumSchema),
      ],
      withOperatorName: [withOperatorName, optional(boolean())],
      withMaxPower: [withMaxPower, optional(boolean())],
      locationExternalId: [locationExternalId, optional(string())],
      evseId: [evseId, optional(string())],
      evseExternalId: [evseExternalId, optional(string())],
      operatorName: [operatorName, optional(string())],
    });
    req.header('RequestId', mapped.requestId);
    req.query('west', mapped.west);
    req.query('south', mapped.south);
    req.query('east', mapped.east);
    req.query('north', mapped.north);
    req.query('zoom', mapped.zoom);
    req.query('evseStatus', mapped.evseStatus);
    req.query('connectorTypes', mapped.connectorTypes);
    req.query('connectorMinPower', mapped.connectorMinPower);
    req.query('authorizationMethods', mapped.authorizationMethods);
    req.query('withOperatorName', mapped.withOperatorName);
    req.query('withMaxPower', mapped.withMaxPower);
    req.query('locationExternalId', mapped.locationExternalId);
    req.query('evseId', mapped.evseId);
    req.query('evseExternalId', mapped.evseExternalId);
    req.query('operatorName', mapped.operatorName);
    req.throwOn(400, BadRequestError, 'The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).');
    req.throwOn(401, UnauthorizedError, 'The request has not been applied because it lacks valid authentication credentials for the target resource.');
    req.throwOn(404, NotFoundError, 'Location Not Found');
    req.authenticate([{ bearerAuth: true }]);
    return req.callAsJson(array(markersResponseSchema), requestOptions);
  }
}
